<template>
  <div class="report">
    <div class="fixed-box">
      <div class="fixed" id="FixedObj">
        <div class="change-tab">
          <div class="f-flex tab">
            <div class="f-item" @click="active=1"><span :class="{active:active==1}">按组织</span></div>
            <div class="f-item" @click="active=2"><span :class="{active:active==2}">按品牌</span></div>
            <div class="f-item" @click="active=3"><span :class="{active:active==3}">按车系</span></div>
          </div>
        </div>
        <div class="select">
          <!--从全局中拿出：dateselect.updateTimeSelect-->
          <span v-on:click="showDateSelect" :class="{'auto-font':getStrLeng(dateSelect.updateTimeSelect)}">{{dateSelect.updateTimeSelect}}<i class="iconfont icon-sanjiaoxing"></i></span>
          <span v-if="active==2" @click="showMyBrandSelected" :class="{'auto-font':getStrLeng(dateSelect.updateTimeSelect)}">品牌<i class="iconfont icon-sanjiaoxing"></i></span>
          <span v-if="active==3" @click="showMyCarSelected" :class="{'auto-font':getStrLeng(dateSelect.updateTimeSelect)}">车系<i class="iconfont icon-sanjiaoxing"></i></span>
        </div>
        <Echart :option="option"></Echart>
      </div>
    </div>
    <MyTable :tableData="tableData"></MyTable>
    <SelectDate></SelectDate>
    <MyBrandSelect></MyBrandSelect>
    <MyCarSelect></MyCarSelect>
  </div>
</template>
<script>
import { mapState } from 'vuex'
import PublicSetEChartVar from '@/utils/PublicSetEChartVar'
import PublicMethods from '@/utils/PublicMethods'
import Echart from '@/components/Echart'
import MyTable from '@/components/MyTable'
import SelectDate from '@/components/SelectDate'
import MyBrandSelect from '@/components/MyBrandSelect'
import MyCarSelect from '@/components/MyCarSelect'
export default {
  name: 'publicPage',
  data() {
    return {
      active: 1,
      isShow: false,
      // XData: [],
      // apiData: [],
      option: {
        color: PublicSetEChartVar.setColors, //每组数据的颜色
        tooltip: PublicSetEChartVar.setTooltip, //提示框
        textStyle: PublicSetEChartVar.setTextStyle,
        xAxis: {
          splitLine: PublicSetEChartVar.setSplitLine, //垂直参考线
          axisTick: PublicSetEChartVar.setAxisTick,
          axisLine: PublicSetEChartVar.setAxisLineX,
          data: this.XData,
        },
        yAxis: [{
            type: 'value',
            splitLine: PublicSetEChartVar.setSplitLine,
            axisTick: PublicSetEChartVar.setAxisTick,
            name: '线索数',
            min: 0,
            max: 50,
            position: 'left',
            interval: 10,
            axisLine: {
              lineStyle: {
                color: 'transparent'
              }
            },
            axisLabel: {
              formatter: '{value} '
            }
          },
          {
            type: 'value',
            splitLine: PublicSetEChartVar.setSplitLine,
            axisTick: PublicSetEChartVar.setAxisTick,
            name: '达成率',
            min: 0,
            max: 200,
            interval: 100,
            position: 'right',
            axisLine: PublicSetEChartVar.setAxisLineY,
            axisLabel: {
              formatter: '{value}'
            }
          }
        ],
        legend: {
          data: ['日新增', '达成率', '同比', '环比']
        },
        series: [{
            name: '日新增',
            type: 'bar',
            data: [5, 20, 36, 10, 10, 20],
            itemStyle: PublicSetEChartVar.setBarColors,
            barMaxWidth: 20,
          },
          {
            name: '达成率',
            type: 'line',
            yAxisIndex: 1,
            itemStyle: PublicSetEChartVar.setLineColors[0],
            data: [105, 100, 169, 109, 129, 190]
          },
          {
            name: '同比',
            type: 'line',
            yAxisIndex: 1,
            itemStyle: PublicSetEChartVar.setLineColors[1],
            data: [11.21, 10.34, 16.87, 17.04, 12.86, 13.94]
          },
          {
            name: '环比',
            type: 'line',
            yAxisIndex: 1,
            itemStyle: PublicSetEChartVar.setLineColors[1],
            data: [12.21, 11.34, 13.87, 12.04, 14.86, 15.94]
          }
        ],
        dataZoom: PublicSetEChartVar.setDataZoom,
      }
    }
  },
  props: ['tableData'],
  components: {
    Echart,
    MyTable,
    SelectDate,
    MyBrandSelect,
    MyCarSelect
  },
  mounted() {
    this.$nextTick(() => {
      this.loadPage();
    })
  },
  methods: {
    loadPage() {
      //设置图表浮动高度
      let obj = document.getElementById('FixedObj');
      let obj2 = document.getElementsByClassName('fixed-box')[0];
      obj2.style.height = obj.offsetHeight + 'px';
      // this.getXData();
    },
    // getXData() {
    //   if (this.tableData != null) {
    //     this.tableData.forEach((x, index) => {
    //       debugger
    //       if (index >=1) {
    //         console.log(x.busName)
    //         this.XData.push(x.busName);
    //       }
    //     })
    //   }
    // },
    showMyBrandSelected() {
      let MyBrandSelect = {
        showMyBrandSelect: true
      };
      this.$store.commit('showMyBrandSelect', MyBrandSelect)
    },
    showMyCarSelected() {
      let MyCarSelect = {
        showMyCarSelect: true
      };
      this.$store.commit('showMyCarSelect', MyCarSelect)
    },
    showDateSelect() {
      // this.isShow=!this.isShow
      //改变显示状态，其他值保持不变
      let dateSelect = {
        updateTimeSelect: this.dateSelect.updateTimeSelect,
        showDateSelect: true,
        startTime: '',
        endTime: ''
      }
      this.$store.commit('dateSelect', dateSelect)
    },
    getStrLeng(str) {
      //数据长度与字符串最大长度比较
      if (PublicMethods.getStrLeng(str) >= PublicMethods.setScalMaxLength) {
        return true
      } else {
        return false
      }
    }
  },
  computed: {
    ...mapState({
      dateSelect: state => state.dateSelect,
    }),
    XData() {
      let XData=[];
      if (this.tableData != null) {
        this.tableData.forEach((x, index) => {
          if (index >=1) {
            console.log(x.busName)
             XData.push(x.busName);
          }
        })
        return XData
      }
    },

  }
}

</script>
<!-- Add "scoped" attribute to limit CSS to this component only -->
<style lang="less" scoped>
@import '../styles/var';
.fixed {
  position: fixed;
  width: 100%;
  top: 50px;
  z-index: 1;
  background: #fff;
  .change-tab {
    background-color: @while;
    text-align: center;
    height: 44px;
    line-height: 44px;
    width: 100%;
    border-bottom: 1px solid @borderColor;
    .tab {
      margin: 0 35px;
      span {
        display: inline-block;
        height: 100%;
        &.active {
          border-bottom: 2px solid @themeColor;
          color: @themeColor;
        }
      }
    }
  }
}

.select {
  margin: 15px;
  span {
    border: 1px solid @borderColor;
    display: inline-block;
    line-height: 35px;
    text-indent: 10px;
    border-radius: 44px;
    .icon-sanjiaoxing {
      padding-left: 10px;
      padding-right: 10px;
    }
    +span {
      margin-left: 10px;
    }
  }
}

</style>
